<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<reference id="groupcomp" xml:lang="en-us">
  <title><xmlelement>groupcomp</xmlelement></title>
  <shortdesc>The <xmlelement>groupcomp</xmlelement> element groups a set of  pieces of syntax as a
    single unit.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>syntax diagram
          domain<indexterm><xmlelement>groupcomp</xmlelement></indexterm></indexterm>
        <indexterm>formatting
          expectations<indexterm><xmlelement>groupcomp</xmlelement></indexterm></indexterm>
        <indexterm>syntax diagrams<indexterm>group composites</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="usage-information">
      <title>Usage information</title>
      <p>Each syntax group is a logical set of pieces of syntax that go together. The group
        composite means that the items that make up the syntax diagram will be rendered close
        together rather than being separated by a horizontal or vertical line, which is the usual
        formatting method.</p>
      <draft-comment author="Frank Wegmann" time="19 February 2023">
        <p>The usage information mentions rendering and formatting in one and the same sentence,
          while this is only about rendering here, if I'm not mistaken regarding our language use.
          Please advise whether we should break it out in a section Rendering expectations.</p>
        <p>Furthermore, I cannot observe this rendering expectation in the current DITA-OT
          implementation: I get the same output for the code sample below, when e.g. using
            <xmlelement>groupseq</xmlelement> instead of <xmlelement>groupcomp</xmlelement>. </p>
      </draft-comment>
    </section>
<section id="specialization-hierarchy">
<title>Specialization hierarchy</title>
<p>The <xmlelement>groupcomp</xmlelement> element is specialized from
          <xmlelement>figgroup</xmlelement>. It is defined in the syntax-diagram domain module,
        which is a specialization of the programming domain module.</p>
</section>
    <section conkeyref="content-models-groupcomp/groupcomp.element" id="content-model"/>
    <section id="attributes">
      <title>Attributes</title>
      <div conkeyref="reuse-tc-attributes/syntaxelement-update-importance"/></section>
    <example id="example" otherprops="examples">
      <title>Example</title>
      <p>The following code sample shows how the
          <xmlelement>groupcomp</xmlelement> element can be used to
        indicate how pieces of syntax are grouped together. Two composite
        groups represent two alternate ways to specify an input file to a
        command line program, using either
          <codeph>-i:program-name.py</codeph> or
          <codeph>--input=program-name.ph</codeph>.</p>
      <codeblock id="example-groupcomp">&lt;syntaxdiagram&gt;
  &lt;title&gt;Syntax for runprogram command&lt;/title&gt;
  &lt;groupseq&gt;
    &lt;kwd&gt;runprogram&lt;/kwd&gt;
    &lt;groupchoice>
      <b>&lt;groupcomp></b>&lt;oper>-&lt;/oper>&lt;kwd>i&lt;/kwd>&lt;sep>:&lt;/sep>&lt;var>program-name.py&lt;/var><b>&lt;/groupcomp></b>
      <b>&lt;groupcomp></b>&lt;oper>--&lt;/oper>&lt;kwd>input&lt;/kwd>&lt;sep>=&lt;/sep>&lt;var>program-name.py&lt;/var><b>&lt;/groupcomp></b>
    &lt;/groupchoice&gt;
  &lt;/groupseq>
&lt;/syntaxdiagram></codeblock>
    </example>
  </refbody>
</reference>
